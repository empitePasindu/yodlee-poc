# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class VerifiedAccountResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'request_date': 'str',
        'state': 'str',
        'verified_account': 'list[VerifiedAccounts]',
        'failed_reason': 'str'
    }

    attribute_map = {
        'request_id': 'requestId',
        'request_date': 'requestDate',
        'state': 'state',
        'verified_account': 'verifiedAccount',
        'failed_reason': 'failedReason'
    }

    def __init__(self, request_id=None, request_date=None, state=None, verified_account=None, failed_reason=None, _configuration=None):  # noqa: E501
        """VerifiedAccountResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._request_id = None
        self._request_date = None
        self._state = None
        self._verified_account = None
        self._failed_reason = None
        self.discriminator = None

        if request_id is not None:
            self.request_id = request_id
        if request_date is not None:
            self.request_date = request_date
        if state is not None:
            self.state = state
        if verified_account is not None:
            self.verified_account = verified_account
        if failed_reason is not None:
            self.failed_reason = failed_reason

    @property
    def request_id(self):
        """Gets the request_id of this VerifiedAccountResponse.  # noqa: E501

        The unique identifier for the verification request that returns contextual data  # noqa: E501

        :return: The request_id of this VerifiedAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this VerifiedAccountResponse.

        The unique identifier for the verification request that returns contextual data  # noqa: E501

        :param request_id: The request_id of this VerifiedAccountResponse.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def request_date(self):
        """Gets the request_date of this VerifiedAccountResponse.  # noqa: E501

        The date of the verification request  # noqa: E501

        :return: The request_date of this VerifiedAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._request_date

    @request_date.setter
    def request_date(self, request_date):
        """Sets the request_date of this VerifiedAccountResponse.

        The date of the verification request  # noqa: E501

        :param request_date: The request_date of this VerifiedAccountResponse.  # noqa: E501
        :type: str
        """

        self._request_date = request_date

    @property
    def state(self):
        """Gets the state of this VerifiedAccountResponse.  # noqa: E501

        The overall status of the verification request  # noqa: E501

        :return: The state of this VerifiedAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VerifiedAccountResponse.

        The overall status of the verification request  # noqa: E501

        :param state: The state of this VerifiedAccountResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMPLETED", "FAILED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                state not in allowed_values):
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def verified_account(self):
        """Gets the verified_account of this VerifiedAccountResponse.  # noqa: E501


        :return: The verified_account of this VerifiedAccountResponse.  # noqa: E501
        :rtype: list[VerifiedAccounts]
        """
        return self._verified_account

    @verified_account.setter
    def verified_account(self, verified_account):
        """Sets the verified_account of this VerifiedAccountResponse.


        :param verified_account: The verified_account of this VerifiedAccountResponse.  # noqa: E501
        :type: list[VerifiedAccounts]
        """

        self._verified_account = verified_account

    @property
    def failed_reason(self):
        """Gets the failed_reason of this VerifiedAccountResponse.  # noqa: E501

        The reason for the failure of the verification request  # noqa: E501

        :return: The failed_reason of this VerifiedAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._failed_reason

    @failed_reason.setter
    def failed_reason(self, failed_reason):
        """Sets the failed_reason of this VerifiedAccountResponse.

        The reason for the failure of the verification request  # noqa: E501

        :param failed_reason: The failed_reason of this VerifiedAccountResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACCOUNT_LOCKED", "ADDL_AUTHENTICATION_REQUIRED", "CREDENTIALS_UPDATE_NEEDED", "INCORRECT_CREDENTIALS", "INVALID_ADDL_INFO_PROVIDED", "REQUEST_TIME_OUT", "SITE_BLOCKING_ERROR", "UNEXPECTED_SITE_ERROR", "SITE_NOT_SUPPORTED", "SITE_UNAVAILABLE", "TECH_ERROR", "USER_ACTION_NEEDED_AT_SITE", "SITE_SESSION_INVALIDATED", "NEW_AUTHENTICATION_REQUIRED", "CONSENT_REQUIRED", "CONSENT_EXPIRED", "CONSENT_REVOKED", "INCORRECT_OAUTH_TOKEN", "REQUIRED_DATA_NOT_AVAILABLE", "MATCHING_FAILED", "NO_ELIGIBLE_ACCOUNTS", "USER_INPUT_REQUIRED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                failed_reason not in allowed_values):
            raise ValueError(
                "Invalid value for `failed_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(failed_reason, allowed_values)
            )

        self._failed_reason = failed_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VerifiedAccountResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerifiedAccountResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VerifiedAccountResponse):
            return True

        return self.to_dict() != other.to_dict()
