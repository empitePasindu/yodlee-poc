# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class VerifiedAccounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_name': 'str',
        'verification_status': 'str',
        'account_type': 'str',
        'current_balance': 'Money',
        'displayed_name': 'str',
        'holder': 'list[AccountHolder]',
        'account_number': 'str',
        'classification': 'str',
        'available_balance': 'Money',
        'full_account_number_list': 'FullAccountNumberList',
        'account_id': 'int',
        'balance': 'Money',
        'provider_id': 'str',
        'provider_account_id': 'int',
        'container': 'str',
        'is_selected': 'bool',
        'cash': 'Money',
        'bank_transfer_code': 'list[BankTransferCode]',
        'provider_name': 'str',
        'failed_reason': 'str'
    }

    attribute_map = {
        'account_name': 'accountName',
        'verification_status': 'verificationStatus',
        'account_type': 'accountType',
        'current_balance': 'currentBalance',
        'displayed_name': 'displayedName',
        'holder': 'holder',
        'account_number': 'accountNumber',
        'classification': 'classification',
        'available_balance': 'availableBalance',
        'full_account_number_list': 'fullAccountNumberList',
        'account_id': 'accountId',
        'balance': 'balance',
        'provider_id': 'providerId',
        'provider_account_id': 'providerAccountId',
        'container': 'CONTAINER',
        'is_selected': 'isSelected',
        'cash': 'cash',
        'bank_transfer_code': 'bankTransferCode',
        'provider_name': 'providerName',
        'failed_reason': 'failedReason'
    }

    def __init__(self, account_name=None, verification_status=None, account_type=None, current_balance=None, displayed_name=None, holder=None, account_number=None, classification=None, available_balance=None, full_account_number_list=None, account_id=None, balance=None, provider_id=None, provider_account_id=None, container=None, is_selected=None, cash=None, bank_transfer_code=None, provider_name=None, failed_reason=None, _configuration=None):  # noqa: E501
        """VerifiedAccounts - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_name = None
        self._verification_status = None
        self._account_type = None
        self._current_balance = None
        self._displayed_name = None
        self._holder = None
        self._account_number = None
        self._classification = None
        self._available_balance = None
        self._full_account_number_list = None
        self._account_id = None
        self._balance = None
        self._provider_id = None
        self._provider_account_id = None
        self._container = None
        self._is_selected = None
        self._cash = None
        self._bank_transfer_code = None
        self._provider_name = None
        self._failed_reason = None
        self.discriminator = None

        if account_name is not None:
            self.account_name = account_name
        if verification_status is not None:
            self.verification_status = verification_status
        if account_type is not None:
            self.account_type = account_type
        if current_balance is not None:
            self.current_balance = current_balance
        if displayed_name is not None:
            self.displayed_name = displayed_name
        if holder is not None:
            self.holder = holder
        if account_number is not None:
            self.account_number = account_number
        if classification is not None:
            self.classification = classification
        if available_balance is not None:
            self.available_balance = available_balance
        if full_account_number_list is not None:
            self.full_account_number_list = full_account_number_list
        if account_id is not None:
            self.account_id = account_id
        if balance is not None:
            self.balance = balance
        if provider_id is not None:
            self.provider_id = provider_id
        if provider_account_id is not None:
            self.provider_account_id = provider_account_id
        if container is not None:
            self.container = container
        if is_selected is not None:
            self.is_selected = is_selected
        if cash is not None:
            self.cash = cash
        if bank_transfer_code is not None:
            self.bank_transfer_code = bank_transfer_code
        if provider_name is not None:
            self.provider_name = provider_name
        if failed_reason is not None:
            self.failed_reason = failed_reason

    @property
    def account_name(self):
        """Gets the account_name of this VerifiedAccounts.  # noqa: E501

        The account name as it appears at the site.<br>(The POST accounts service response return this field as name)<br><b>Applicable containers</b>: bank, investment<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :return: The account_name of this VerifiedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this VerifiedAccounts.

        The account name as it appears at the site.<br>(The POST accounts service response return this field as name)<br><b>Applicable containers</b>: bank, investment<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :param account_name: The account_name of this VerifiedAccounts.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def verification_status(self):
        """Gets the verification_status of this VerifiedAccounts.  # noqa: E501

        The status of the account verification.  # noqa: E501

        :return: The verification_status of this VerifiedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this VerifiedAccounts.

        The status of the account verification.  # noqa: E501

        :param verification_status: The verification_status of this VerifiedAccounts.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCESS", "FAILED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                verification_status not in allowed_values):
            raise ValueError(
                "Invalid value for `verification_status` ({0}), must be one of {1}"  # noqa: E501
                .format(verification_status, allowed_values)
            )

        self._verification_status = verification_status

    @property
    def account_type(self):
        """Gets the account_type of this VerifiedAccounts.  # noqa: E501

        The type of account that is aggregated, i.e., savings, checking, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>MONEY_MARKET</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>BROKERAGE_CASH</li><li>BROKERAGE_LINK_ACCOUNT</li><li>INDIVIDUAL</li><li>CMA</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_MARGIN</li><li>BROKERAGE_CASH</li><li>BROKERAGE_LINK_ACCOUNT</li><li>INDIVIDUAL</li><li>CMA</li></ul><ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :return: The account_type of this VerifiedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this VerifiedAccounts.

        The type of account that is aggregated, i.e., savings, checking, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>MONEY_MARKET</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>BROKERAGE_CASH</li><li>BROKERAGE_LINK_ACCOUNT</li><li>INDIVIDUAL</li><li>CMA</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_MARGIN</li><li>BROKERAGE_CASH</li><li>BROKERAGE_LINK_ACCOUNT</li><li>INDIVIDUAL</li><li>CMA</li></ul><ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :param account_type: The account_type of this VerifiedAccounts.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def current_balance(self):
        """Gets the current_balance of this VerifiedAccounts.  # noqa: E501

        The balance in the account that is available at the beginning of the business day; it is equal to the ledger balance of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :return: The current_balance of this VerifiedAccounts.  # noqa: E501
        :rtype: Money
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this VerifiedAccounts.

        The balance in the account that is available at the beginning of the business day; it is equal to the ledger balance of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :param current_balance: The current_balance of this VerifiedAccounts.  # noqa: E501
        :type: Money
        """

        self._current_balance = current_balance

    @property
    def displayed_name(self):
        """Gets the displayed_name of this VerifiedAccounts.  # noqa: E501

        The name or identification of the account owner, as it appears at the FI site. <br><b>Note:</b> The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :return: The displayed_name of this VerifiedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._displayed_name

    @displayed_name.setter
    def displayed_name(self, displayed_name):
        """Sets the displayed_name of this VerifiedAccounts.

        The name or identification of the account owner, as it appears at the FI site. <br><b>Note:</b> The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :param displayed_name: The displayed_name of this VerifiedAccounts.  # noqa: E501
        :type: str
        """

        self._displayed_name = displayed_name

    @property
    def holder(self):
        """Gets the holder of this VerifiedAccounts.  # noqa: E501

        Holder details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :return: The holder of this VerifiedAccounts.  # noqa: E501
        :rtype: list[AccountHolder]
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this VerifiedAccounts.

        Holder details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :param holder: The holder of this VerifiedAccounts.  # noqa: E501
        :type: list[AccountHolder]
        """

        self._holder = holder

    @property
    def account_number(self):
        """Gets the account_number of this VerifiedAccounts.  # noqa: E501

        The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank / Investment</b>:<br> The account number for the bank account as it appears at the site.<br>In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: bank, investment<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :return: The account_number of this VerifiedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this VerifiedAccounts.

        The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank / Investment</b>:<br> The account number for the bank account as it appears at the site.<br>In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: bank, investment<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :param account_number: The account_number of this VerifiedAccounts.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def classification(self):
        """Gets the classification of this VerifiedAccounts.  # noqa: E501

        The classification of the account such as personal, corporate, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<li>GET /verification/verifiedAccounts</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The classification of this VerifiedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this VerifiedAccounts.

        The classification of the account such as personal, corporate, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<li>GET /verification/verifiedAccounts</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param classification: The classification of this VerifiedAccounts.  # noqa: E501
        :type: str
        """
        allowed_values = ["OTHER", "PERSONAL", "CORPORATE", "SMALL_BUSINESS", "TRUST", "ADD_ON_CARD", "VIRTUAL_CARD"]  # noqa: E501
        if (self._configuration.client_side_validation and
                classification not in allowed_values):
            raise ValueError(
                "Invalid value for `classification` ({0}), must be one of {1}"  # noqa: E501
                .format(classification, allowed_values)
            )

        self._classification = classification

    @property
    def available_balance(self):
        """Gets the available_balance of this VerifiedAccounts.  # noqa: E501

        The balance in the account that is available for spending. For checking accounts with overdraft, available balance may include overdraft amount, if end site adds overdraft balance to available balance.<br><b>Applicable containers</b>: bank, investment<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :return: The available_balance of this VerifiedAccounts.  # noqa: E501
        :rtype: Money
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this VerifiedAccounts.

        The balance in the account that is available for spending. For checking accounts with overdraft, available balance may include overdraft amount, if end site adds overdraft balance to available balance.<br><b>Applicable containers</b>: bank, investment<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :param available_balance: The available_balance of this VerifiedAccounts.  # noqa: E501
        :type: Money
        """

        self._available_balance = available_balance

    @property
    def full_account_number_list(self):
        """Gets the full_account_number_list of this VerifiedAccounts.  # noqa: E501

        Full account number List of the account that contains paymentAccountNumber and unmaskedAccountNumber. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment <br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :return: The full_account_number_list of this VerifiedAccounts.  # noqa: E501
        :rtype: FullAccountNumberList
        """
        return self._full_account_number_list

    @full_account_number_list.setter
    def full_account_number_list(self, full_account_number_list):
        """Sets the full_account_number_list of this VerifiedAccounts.

        Full account number List of the account that contains paymentAccountNumber and unmaskedAccountNumber. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment <br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :param full_account_number_list: The full_account_number_list of this VerifiedAccounts.  # noqa: E501
        :type: FullAccountNumberList
        """

        self._full_account_number_list = full_account_number_list

    @property
    def account_id(self):
        """Gets the account_id of this VerifiedAccounts.  # noqa: E501

        The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :return: The account_id of this VerifiedAccounts.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this VerifiedAccounts.

        The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :param account_id: The account_id of this VerifiedAccounts.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def balance(self):
        """Gets the balance of this VerifiedAccounts.  # noqa: E501

        The total account value. <br><b>Additional Details:</b><br><b>Bank:</b> available balance or current balance.<br><b>Investment:</b> The total balance of all the investment account, as it appears on the FI site.<b>Applicable containers</b>: bank, investment <br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :return: The balance of this VerifiedAccounts.  # noqa: E501
        :rtype: Money
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this VerifiedAccounts.

        The total account value. <br><b>Additional Details:</b><br><b>Bank:</b> available balance or current balance.<br><b>Investment:</b> The total balance of all the investment account, as it appears on the FI site.<b>Applicable containers</b>: bank, investment <br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :param balance: The balance of this VerifiedAccounts.  # noqa: E501
        :type: Money
        """

        self._balance = balance

    @property
    def provider_id(self):
        """Gets the provider_id of this VerifiedAccounts.  # noqa: E501

        Identifier of the provider site. The primary key of provider resource. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :return: The provider_id of this VerifiedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this VerifiedAccounts.

        Identifier of the provider site. The primary key of provider resource. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :param provider_id: The provider_id of this VerifiedAccounts.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def provider_account_id(self):
        """Gets the provider_account_id of this VerifiedAccounts.  # noqa: E501

        The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :return: The provider_account_id of this VerifiedAccounts.  # noqa: E501
        :rtype: int
        """
        return self._provider_account_id

    @provider_account_id.setter
    def provider_account_id(self, provider_account_id):
        """Sets the provider_account_id of this VerifiedAccounts.

        The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :param provider_account_id: The provider_account_id of this VerifiedAccounts.  # noqa: E501
        :type: int
        """

        self._provider_account_id = provider_account_id

    @property
    def container(self):
        """Gets the container of this VerifiedAccounts.  # noqa: E501

        The type of service. E.g., Bank, Investment <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The container of this VerifiedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this VerifiedAccounts.

        The type of service. E.g., Bank, Investment <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</ul><b>Applicable Values</b><br>  # noqa: E501

        :param container: The container of this VerifiedAccounts.  # noqa: E501
        :type: str
        """
        allowed_values = ["bank", "investment"]  # noqa: E501
        if (self._configuration.client_side_validation and
                container not in allowed_values):
            raise ValueError(
                "Invalid value for `container` ({0}), must be one of {1}"  # noqa: E501
                .format(container, allowed_values)
            )

        self._container = container

    @property
    def is_selected(self):
        """Gets the is_selected of this VerifiedAccounts.  # noqa: E501

        Indicates if an account is selected by the user in the FastLink 4.0 application  # noqa: E501

        :return: The is_selected of this VerifiedAccounts.  # noqa: E501
        :rtype: bool
        """
        return self._is_selected

    @is_selected.setter
    def is_selected(self, is_selected):
        """Sets the is_selected of this VerifiedAccounts.

        Indicates if an account is selected by the user in the FastLink 4.0 application  # noqa: E501

        :param is_selected: The is_selected of this VerifiedAccounts.  # noqa: E501
        :type: bool
        """

        self._is_selected = is_selected

    @property
    def cash(self):
        """Gets the cash of this VerifiedAccounts.  # noqa: E501

        The amount that is available for immediate withdrawal or the total amount available to purchase securities in a brokerage or investment account.<br><b>Note:</b> The cash balance field is only applicable to brokerage related accounts.<br><br><b>Aggregated </b><br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :return: The cash of this VerifiedAccounts.  # noqa: E501
        :rtype: Money
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """Sets the cash of this VerifiedAccounts.

        The amount that is available for immediate withdrawal or the total amount available to purchase securities in a brokerage or investment account.<br><b>Note:</b> The cash balance field is only applicable to brokerage related accounts.<br><br><b>Aggregated </b><br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :param cash: The cash of this VerifiedAccounts.  # noqa: E501
        :type: Money
        """

        self._cash = cash

    @property
    def bank_transfer_code(self):
        """Gets the bank_transfer_code of this VerifiedAccounts.  # noqa: E501

        Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<br><ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :return: The bank_transfer_code of this VerifiedAccounts.  # noqa: E501
        :rtype: list[BankTransferCode]
        """
        return self._bank_transfer_code

    @bank_transfer_code.setter
    def bank_transfer_code(self, bank_transfer_code):
        """Sets the bank_transfer_code of this VerifiedAccounts.

        Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<br><ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :param bank_transfer_code: The bank_transfer_code of this VerifiedAccounts.  # noqa: E501
        :type: list[BankTransferCode]
        """

        self._bank_transfer_code = bank_transfer_code

    @property
    def provider_name(self):
        """Gets the provider_name of this VerifiedAccounts.  # noqa: E501

        Service provider or institution name where the account originates. This belongs to the provider resource.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :return: The provider_name of this VerifiedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this VerifiedAccounts.

        Service provider or institution name where the account originates. This belongs to the provider resource.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<ul><li>GET /verification/verifiedAccounts</li></ul>  # noqa: E501

        :param provider_name: The provider_name of this VerifiedAccounts.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    @property
    def failed_reason(self):
        """Gets the failed_reason of this VerifiedAccounts.  # noqa: E501

        The reason for the verification failure of the account.  # noqa: E501

        :return: The failed_reason of this VerifiedAccounts.  # noqa: E501
        :rtype: str
        """
        return self._failed_reason

    @failed_reason.setter
    def failed_reason(self, failed_reason):
        """Sets the failed_reason of this VerifiedAccounts.

        The reason for the verification failure of the account.  # noqa: E501

        :param failed_reason: The failed_reason of this VerifiedAccounts.  # noqa: E501
        :type: str
        """
        allowed_values = ["REQUIRED_DATA_NOT_AVAILABLE", "MATCHING_FAILED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                failed_reason not in allowed_values):
            raise ValueError(
                "Invalid value for `failed_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(failed_reason, allowed_values)
            )

        self._failed_reason = failed_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VerifiedAccounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerifiedAccounts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VerifiedAccounts):
            return True

        return self.to_dict() != other.to_dict()
